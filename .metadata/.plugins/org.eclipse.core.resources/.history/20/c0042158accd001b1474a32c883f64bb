package DynamicProgramming;

import java.util.HashSet;
	//Brute force
	/*T - O(2^n) ; S - O(n)
	 * 1. convert wordDict to set for O(1) lookup.
	 * 2. At every step we can choose to split or not split
	 * 3. if set contains prefix string and recursion of string suffix, then return true.
	 * 4. as the string keeps decreasing, base case is s.len ==0 then return true.
	 */

	//DP
	/*T - O(n^3) ; S - O(n)
	Thought Process:
	    There are repeated permutations on how to use the string. So it's a dp problem.
	    Understanding on how to create a dp boolean array lies the basis of the solution in here.
	    
	    T.C -> O(N3) - 2 nested loops and substring
	    S.C -> O(N) - where N is the length of the string
	*/

public class _139_WordBreak {
	
	private static boolean wordBreak(String s, String[] wordDict) {
		 if(s == null||s.length()==0){
	            return false;
	        }
	        //foe easy lookup from dict, use hash set
	        HashSet<String> set = new HashSet<>();
	        for(String word: wordDict) {
				set.add(word);
			}
	        int n = s.length();
	        //dp array to store the results of repeating subarrays
	        boolean[] dp = new boolean[n+1];
	        dp[0] = true;//initially set the first index to true, indicating whatever previous matched. This is done to check if atleast one sunstring is present in the dict from the begining 
	        //check each subarray
	        for(int i=1;i<n+1;i++){
	            for(int j=0;j<i;j++){
	                //only if true in dp array check if the subsequent sunarray is in dict
	                if(dp[j] == true && set.contains(s.substring(j,i))){
	                    dp[i] = true;
	                    break;
	                }
	            }
	        }
	        return dp[n];
		
	}
	/*
	static HashSet<String> set;
	private static boolean wordBreak(String s, String[] wordDict) {
		if(s==null || s.length()==0)return false;
		set = new HashSet<>();
		for(String word: wordDict) {
			set.add(word);
		}
		return helper(s);
	}
	
	private static boolean helper(String s) {
		//base
		if(s.length() == 0)return true;
		//logic
		for(int i=0;i<=s.length();i++) {
			if(set.contains(s.substring(0, i)) && helper(s.substring(i)))return true;
		}
		return false;
	}
	*/

	public static void main(String[] args) {
		String s = "leetcode";
		String[] wordDict = {"leet","code"};
		boolean result = wordBreak(s, wordDict);
		System.out.println(result);
	}

}
