package Hashing;

import java.util.Arrays;
import java.util.HashMap;

public class _525_ContiguousArray {
	
	/*private static int findMaxLength(int[] nums) {
		int result=0;
		if(nums==null || nums.length==0)return result;
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(0, -1);
		int sum=0;
		for(int i=0;i<nums.length;i++) {
			int num = nums[i];
			sum = num == 0 ? sum-1 : sum +1;
			if(!map.containsKey(sum)) {
				map.put(sum, i);
			}else {
				int prev = map.get(sum);
				result = Math.max(result, (i-prev));
			}
		}
		return result;
	}*/
	
	private static int findMaxLength(int[] nums) {
		int result=0;
		if(nums==null || nums.length==0)return result;
		for(int i=0;i<nums.length-1;i++) {
			for(int j=i+1;j<nums.length;j++) {
				int[] temp = Arrays.copyOfRange(nums, i, j+1);
				int sum=0;
				for(int k=0;k<temp.length;k++) {
					int num = temp[k];
					sum = num == 0 ? sum-1: sum+1;
				}
				if(sum == 0)result = Math.max(result, (j-i+1));
			}
		}
		return result;
	}

	public static void main(String[] args) {
		int[] nums = {1,0,1,0,1,1,1,1,0,0,1,0,1};
		int result = findMaxLength(nums);
		System.out.println(result);
	}

}
